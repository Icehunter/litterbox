<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LitterBox</name>
    </assembly>
    <members>
        <member name="T:LitterBox.Compression">
            <summary>
            Compression Class
            </summary>
        </member>
        <member name="M:LitterBox.Compression.Zip(System.String)">
            <summary>
            Zip String => Byte[] (Compressed)
            </summary>
            <param name="value">String Data</param>
            <returns>Byte[]</returns>
        </member>
        <member name="M:LitterBox.Compression.Unzip(System.Byte[])">
            <summary>
            Unzip Byte[] => String (Uncompressed)
            </summary>
            <param name="value">Byte[] Data</param>
            <returns>String</returns>
        </member>
        <member name="T:LitterBox.JsonContractResolvers.CamelCaseExceptDictionaryKeysContractResolver">
            <summary>
            Handle dictoinary keys and don't lowercase them
            </summary>
        </member>
        <member name="M:LitterBox.JsonContractResolvers.CamelCaseExceptDictionaryKeysContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            internal override to Resolver
            </summary>  
            <param name="objectType">objectType</param>
            <returns>JsonDictionaryContract</returns>
        </member>
        <member name="T:LitterBox.Models.ExceptionEvent">
            <summary>
            ExceptionEvent Instance
            </summary>
        </member>
        <member name="M:LitterBox.Models.ExceptionEvent.#ctor(System.Object,System.Exception)">
            <summary>
            ExceptionEvent Constructor
            </summary>
            <param name="sender">sender</param>
            <param name="exception">exception</param>
        </member>
        <member name="P:LitterBox.Models.ExceptionEvent.Sender">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:LitterBox.Models.ExceptionEvent.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:LitterBox.Models.LitterBoxItem`1">
            <summary>
            CacheItem Class Instance
            </summary>
        </member>
        <member name="P:LitterBox.Models.LitterBoxItem`1.Key">
            <summary>
            Key Of Cached Item
            </summary>
        </member>
        <member name="P:LitterBox.Models.LitterBoxItem`1.Value">
            <summary>
            T Value Of Cached Item
            </summary>
        </member>
        <member name="P:LitterBox.Models.LitterBoxItem`1.Created">
            <summary>
            Creation Time
            </summary>
        </member>
        <member name="P:LitterBox.Models.LitterBoxItem`1.TimeToLive">
            <summary>
            Time (seconds) After Creation To Expire
            </summary>
        </member>
        <member name="P:LitterBox.Models.LitterBoxItem`1.TimeToRefresh">
            <summary>
            Time (seconds) After Creation To Be Stale/Need Refreshing
            </summary>
        </member>
        <member name="M:LitterBox.Models.LitterBoxItem`1.IsExpired">
            <summary>
            Helper Function For Expiration
            </summary>
            <returns>True|False</returns>
        </member>
        <member name="M:LitterBox.Models.LitterBoxItem`1.IsStale">
            <summary>
            Helper Function For Expiration
            </summary>
            <returns>True|False</returns>
        </member>
        <member name="T:LitterBox.Models.Tenancy">
            <summary>
            Abstraction Around Multi-Level Caching
            </summary>
        </member>
        <member name="M:LitterBox.Models.Tenancy.#ctor(LitterBox.Interfaces.ILitterBox[])">
            <summary>
            Instiate A New Tenancy
            </summary>
            <param name="caches">Array Of Caches In Priority</param>
        </member>
        <member name="P:LitterBox.Models.Tenancy._caches">
            <summary>
            Private Backing Of Cache Array
            </summary>
        </member>
        <member name="M:LitterBox.Models.Tenancy.RaiseException(System.Exception)">
            <summary>
            Internal ExceptionEvent Invoker
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:LitterBox.Models.Tenancy.ExceptionEvent">
            <summary>
            EventHandler For ExceptionEvent
            </summary>
        </member>
        <member name="M:LitterBox.Models.Tenancy.Reconnect">
            <summary>
            Close/Dispose Connection And Reconnect With Existing Properties
            </summary>
            <returns>Success True|False (For Each Cache)</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.Flush">
            <summary>
            Flush Cache
            </summary>
            <returns>Success True|False (For Each Cache)</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.GetItem``1(System.String)">
            <summary>
            GetItem T By Key
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <returns>TenancyResult => LitterBoxItem T</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.GetItem``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            GetItem T By Key, Generator, TimeToRefresh, TimeToLive
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <param name="generator">Generator Action If Not Found</param>
            <param name="timeToRefresh">How Long After Creation To Be Considered "Good"</param>
            <param name="timeToLive">How Long After Creation To Auto-Delete</param>
            <returns>TenancyResult => LitterBoxItem T</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.GetItem``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            GetItem T By Key, Generator, TimeToRefresh, TimeToLive
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <param name="generator">Generator Action If Not Found</param>
            <param name="timeToRefresh">How Long After Creation To Be Considered "Good"</param>
            <param name="timeToLive">How Long After Creation To Auto-Delete</param>
            <returns>TenancyResult => LitterBoxItem T</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.GetItems``1(System.Collections.Generic.List{System.String})">
            <summary>
            GetItems T By Keys
            </summary>
            <typeparam name="T">Type Of Cached Values</typeparam>
            <param name="keys">Key Lookups</param>
            <returns>List TenancyResult => LitterBoxItem T</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.GetItems``1(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Func{``0}},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            GetItems T By Keys, Generators, TimeToRefresh, TimeToLive
            </summary>
            <typeparam name="T">Type Of Cached Values</typeparam>
            <param name="keys">Key Lookups</param>
            <param name="generators">Generator Actions If Not Found</param>
            <param name="timeToRefresh">How Long After Creation To Be Considered "Good"</param>
            <param name="timeToLive">How Long After Creation To Auto-Delete</param>
            <returns>List TenancyResult => LitterBoxItem T</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.GetItems``1(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Func{System.Threading.Tasks.Task{``0}}},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            GetItems T By Keys, Generators, TimeToRefresh, TimeToLive
            </summary>
            <typeparam name="T">Type Of Cached Values</typeparam>
            <param name="keys">Key Lookups</param>
            <param name="generators">Generator Actions If Not Found</param>
            <param name="timeToRefresh">How Long After Creation To Be Considered "Good"</param>
            <param name="timeToLive">How Long After Creation To Auto-Delete</param>
            <returns>List TenancyResult => LitterBoxItem T</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.SetItem``1(System.String,LitterBox.Models.LitterBoxItem{``0})">
            <summary>
            SetItem T By Key
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <param name="litter">Item T To Be Cached</param>
            <returns>Success True|False (For Each Cache)</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.SetItems``1(System.Collections.Generic.List{System.String},System.Collections.Generic.List{LitterBox.Models.LitterBoxItem{``0}})">
            <summary>
            SetItems T By Keys
            </summary>
            <typeparam name="T">Type Of Cached Values</typeparam>
            <param name="keys">Key Lookups</param>
            <param name="litters">Items T To Be Cached</param>
            <returns>Success True|False (For Each Cache)</returns>
        </member>
        <member name="M:LitterBox.Models.Tenancy.SetItemFireAndForget``1(System.String,LitterBox.Models.LitterBoxItem{``0})">
            <summary>
            SetItem T (Fire Forget) By Key, LitterBoxItem T
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <param name="litter">Item T To Be Cached</param>
        </member>
        <member name="M:LitterBox.Models.Tenancy.SetItemFireAndForget``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            SetItem T (Fire Forget) By Key, Generator, TimeToRefresh, TimeToLive
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <param name="generator">Generator Action</param>
            <param name="timeToRefresh">How Long After Creation To Be Considered "Good"</param>
            <param name="timeToLive">How Long After Creation To Auto-Delete</param>
        </member>
        <member name="M:LitterBox.Models.Tenancy.SetItemFireAndForget``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            SetItem T (Fire Forget) By Key, Generator, TimeToRefresh, TimeToLive
            </summary>
            <typeparam name="T">Type Of Cached Value</typeparam>
            <param name="key">Key Lookup</param>
            <param name="generator">Generator Action</param>
            <param name="timeToRefresh">How Long After Creation To Be Considered "Good"</param>
            <param name="timeToLive">How Long After Creation To Auto-Delete</param>
        </member>
        <member name="T:LitterBox.Models.TenancyResult`1">
            <summary>
            Tenancy Result Class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:LitterBox.Models.TenancyResult`1.Key">
            <summary>
            Key In Cache (Null If Not Getting Items)
            </summary>
        </member>
        <member name="P:LitterBox.Models.TenancyResult`1.Type">
            <summary>
            Type Of Cache Data Came From
            </summary>
        </member>
        <member name="P:LitterBox.Models.TenancyResult`1.Value">
            <summary>
            T Value Of Stored Item
            </summary>
        </member>
        <member name="M:LitterBox.Utilities.Serialize``1(``0)">
            <summary>
            Convert T To Json
            </summary>
            <typeparam name="T">Type Of Cached Item</typeparam>
            <param name="value">Value Of Cached Item</param>
            <returns>Json Representation</returns>
        </member>
        <member name="M:LitterBox.Utilities.Deserialize``1(System.String)">
            <summary>
            Convert Json To T
            </summary>
            <typeparam name="T">Type Of Cached Item</typeparam>
            <param name="value">Value Of Cached Item</param>
            <returns>T Representation</returns>
        </member>
    </members>
</doc>
